Sub ForwardSpecificMeeting()
    Dim oApp As Outlook.Application
    Dim oNamespace As Outlook.Namespace
    Dim oCalendar As Outlook.Folder
    Dim oItems As Outlook.Items
    Dim oMeeting As Outlook.AppointmentItem
    Dim oMeetingItem As Outlook.MeetingItem
    Dim oForward As Outlook.MeetingItem
    Dim Recipients As String
    Dim RecipArray() As String
    Dim i As Integer
    Dim meetingDate As Date
    Dim meetingTime As Date
    Dim meetingSubject As String
    Dim found As Boolean
    
    ' Initialize Outlook Application
    Set oApp = New Outlook.Application
    Set oNamespace = oApp.GetNamespace("MAPI")
    Set oCalendar = oNamespace.GetDefaultFolder(olFolderCalendar)
    Set oItems = oCalendar.Items
    
    ' Set the criteria for the meeting you want to find
    meetingDate = DateValue("2023-10-15") ' Change this to your desired date
    meetingTime = TimeValue("10:00:00") ' Change this to your desired time
    meetingSubject = "Your Meeting Subject" ' Change this to your desired subject
    
    ' Sort the items by start date
    oItems.Sort "[Start]"
    
    ' Iterate through the calendar items to find the meeting with the specified criteria
    found = False
    For Each oMeeting In oItems
        If oMeeting.Start >= meetingDate And oMeeting.Start < meetingDate + 1 Then
            If oMeeting.Start = meetingDate + meetingTime And oMeeting.Subject = meetingSubject Then
                ' Display meeting details for debugging
                MsgBox "Meeting Found:" & vbCrLf & _
                       "Subject: " & oMeeting.Subject & vbCrLf & _
                       "Start: " & oMeeting.Start & vbCrLf & _
                       "Location: " & oMeeting.Location, vbInformation, "Meeting Details"
                
                ' Send the meeting to yourself to create a MeetingItem in Sent Items
                oMeeting.Recipients.Add oNamespace.CurrentUser.Address
                oMeeting.Send
                
                ' Wait for the item to appear in Sent Items
                Application.Wait (Now + TimeValue("0:00:05")) ' Wait for 5 seconds
                
                ' Find the MeetingItem in Sent Items
                Set oMeetingItem = oNamespace.GetDefaultFolder(olFolderSentMail).Items.Find("[Subject] = '" & meetingSubject & "'")
                
                If Not oMeetingItem Is Nothing Then
                    ' Forward the meeting
                    Set oForward = oMeetingItem.Forward
                    
                    ' Add new recipients from a string variable
                    Recipients = "xxx@xxx.com, xxx2@xxx.com" ' Update with your variable
                    RecipArray = Split(Recipients, ",")
                    
                    For i = LBound(RecipArray) To UBound(RecipArray)
                        oForward.Recipients.Add Trim(RecipArray(i))
                    Next i
                    
                    ' Display the meeting invite for review before sending
                    oForward.Display
                Else
                    MsgBox "Meeting not found in Sent Items. Please check the subject or identifier.", vbExclamation, "Error"
                End If
                
                found = True
                Exit For
            End If
        End If
    Next oMeeting
    
    If Not found Then
        MsgBox "No meeting found with the specified criteria.", vbExclamation, "Error"
    End If

    ' Clean up
    Set oForward = Nothing
    Set oMeetingItem = Nothing
    Set oMeeting = Nothing
    Set oApp = Nothing
End Sub

----------------------------------------------------------------------------------------------
Remove column duplicates
----------------------------------------------------------------------------------------------
Sub RemoveDuplicatesWithinCells()
    Dim ws As Worksheet
    Dim emailRange As Range
    Dim cell As Range
    Dim emailDict As Object
    Dim emailArray() As String
    Dim email As Variant ' Declare as Variant for dictionary keys
    Dim result As String
    Dim i As Integer
    
    ' Set the worksheet
    Set ws = ThisWorkbook.Sheets("Sheet1") ' Change "Sheet1" to your sheet name
    
    ' Define the range for the columns you want to process
    ' Assuming columns A, B, and C are used
    Set emailRange = ws.Range("A1:C10") ' Adjust the range as needed
    
    ' Process each cell in the specified range
    For Each cell In emailRange
        ' Initialize a dictionary to store unique emails for this cell
        Set emailDict = CreateObject("Scripting.Dictionary")
        
        ' Split the cell content into an array of emails using multiple delimiters
        emailArray = Split(cell.Value, ",")
        
        ' Further split by semicolon and space if needed
        Dim tempArray() As String
        Dim tempEmail As String
        Dim j As Integer
        
        ' Check each email for uniqueness within the cell
        On Error Resume Next ' Ignore errors when adding duplicates to the collection
        For i = LBound(emailArray) To UBound(emailArray)
            tempArray = Split(emailArray(i), ";")
            For j = LBound(tempArray) To UBound(tempArray)
                tempEmail = Trim(tempArray(j))
                If tempEmail <> "" Then
                    If Not emailDict.exists(tempEmail) Then
                        emailDict(tempEmail) = True
                    End If
                End If
            Next j
        Next i
        On Error GoTo 0 ' Resume normal error handling
        
        ' Reassemble unique emails into a single string
        result = ""
        For Each email In emailDict.Keys
            result = result & email & ", "
        Next email
        
        ' Remove the trailing delimiter and update the cell
        If Len(result) > 0 Then
            result = Left(result, Len(result) - 2)
        End If
        cell.Value = result
    Next cell
    
    MsgBox "Duplicate emails have been removed within each cell.", vbInformation
End Sub
