Sub ForwardSpecificMeeting()
    Dim oApp As Outlook.Application
    Dim oNamespace As Outlook.Namespace
    Dim oCalendar As Outlook.Folder
    Dim oItems As Outlook.Items
    Dim oMeeting As Outlook.AppointmentItem
    Dim oMeetingItem As Outlook.MeetingItem
    Dim oForward As Outlook.MeetingItem
    Dim Recipients As String
    Dim RecipArray() As String
    Dim i As Integer
    Dim meetingDate As Date
    Dim meetingTime As Date
    Dim meetingSubject As String
    Dim found As Boolean
    
    ' Initialize Outlook Application
    Set oApp = New Outlook.Application
    Set oNamespace = oApp.GetNamespace("MAPI")
    Set oCalendar = oNamespace.GetDefaultFolder(olFolderCalendar)
    Set oItems = oCalendar.Items
    
    ' Set the criteria for the meeting you want to find
    meetingDate = DateValue("2023-10-15") ' Change this to your desired date
    meetingTime = TimeValue("10:00:00") ' Change this to your desired time
    meetingSubject = "Your Meeting Subject" ' Change this to your desired subject
    
    ' Sort the items by start date
    oItems.Sort "[Start]"
    
    ' Iterate through the calendar items to find the meeting with the specified criteria
    found = False
    For Each oMeeting In oItems
        If oMeeting.Start >= meetingDate And oMeeting.Start < meetingDate + 1 Then
            If oMeeting.Start = meetingDate + meetingTime And oMeeting.Subject = meetingSubject Then
                ' Display meeting details for debugging
                MsgBox "Meeting Found:" & vbCrLf & _
                       "Subject: " & oMeeting.Subject & vbCrLf & _
                       "Start: " & oMeeting.Start & vbCrLf & _
                       "Location: " & oMeeting.Location, vbInformation, "Meeting Details"
                
                ' Send the meeting to yourself to create a MeetingItem in Sent Items
                oMeeting.Recipients.Add oNamespace.CurrentUser.Address
                oMeeting.Send
                
                ' Wait for the item to appear in Sent Items
                Application.Wait (Now + TimeValue("0:00:05")) ' Wait for 5 seconds
                
                ' Find the MeetingItem in Sent Items
                Set oMeetingItem = oNamespace.GetDefaultFolder(olFolderSentMail).Items.Find("[Subject] = '" & meetingSubject & "'")
                
                If Not oMeetingItem Is Nothing Then
                    ' Forward the meeting
                    Set oForward = oMeetingItem.Forward
                    
                    ' Add new recipients from a string variable
                    Recipients = "xxx@xxx.com, xxx2@xxx.com" ' Update with your variable
                    RecipArray = Split(Recipients, ",")
                    
                    For i = LBound(RecipArray) To UBound(RecipArray)
                        oForward.Recipients.Add Trim(RecipArray(i))
                    Next i
                    
                    ' Display the meeting invite for review before sending
                    oForward.Display
                Else
                    MsgBox "Meeting not found in Sent Items. Please check the subject or identifier.", vbExclamation, "Error"
                End If
                
                found = True
                Exit For
            End If
        End If
    Next oMeeting
    
    If Not found Then
        MsgBox "No meeting found with the specified criteria.", vbExclamation, "Error"
    End If

    ' Clean up
    Set oForward = Nothing
    Set oMeetingItem = Nothing
    Set oMeeting = Nothing
    Set oApp = Nothing
End Sub

----------------------------------------------------------------------------------------------
Remove column duplicates
----------------------------------------------------------------------------------------------
Sub RemoveDuplicatesAndSeparateEmails()
    Dim ws As Worksheet
    Dim emailRange As Range
    Dim cell As Range
    Dim emailDict As Object
    Dim email As Variant
    Dim result As String
    Dim regex As Object
    Dim matches As Object
    Dim match As Object
    
    ' Set the worksheet
    Set ws = ThisWorkbook.Sheets("Sheet1") ' Change "Sheet1" to your sheet name
    
    ' Define the range for the columns you want to process
    Set emailRange = ws.Range("A1:C10") ' Adjust the range as needed
    
    ' Create a regular expression object
    Set regex = CreateObject("VBScript.RegExp")
    regex.Pattern = "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}"
    regex.Global = True
    
    ' Process each cell in the specified range
    For Each cell In emailRange
        ' Initialize a dictionary to store unique emails for this cell
        Set emailDict = CreateObject("Scripting.Dictionary")
        
        ' Find all matches of email patterns in the cell
        Set matches = regex.Execute(cell.Value)
        
        ' Check each match for uniqueness within the cell
        On Error Resume Next ' Ignore errors when adding duplicates to the collection
        For Each match In matches
            email = Trim(match.Value)
            If email <> "" Then
                If Not emailDict.exists(email) Then
                    emailDict(email) = True
                End If
            End If
        Next match
        On Error GoTo 0 ' Resume normal error handling
        
        ' Reassemble unique emails into a single string separated by semicolons
        result = Join(emailDict.Keys, "; ")
        
        ' Update the cell with the result
        cell.Value = result
    Next cell
    
    MsgBox "Duplicate emails have been removed and emails have been separated.", vbInformation
End Sub
---------------------------------------------------------------------------------------------------------------------
column duplicates (works for 2 cols)
-----------------------------------------------------------------------------------------------------------------------
Sub RemoveDuplicatesFromSecondColumn()
    Dim ws As Worksheet
    Dim emailRange1 As Range
    Dim emailRange2 As Range
    Dim cell1 As Range
    Dim cell2 As Range
    Dim emailDict As Object
    Dim emailArray() As String
    Dim email As Variant ' Declare as Variant for dictionary keys
    Dim result1 As String
    Dim result2 As String
    Dim i As Integer
    
    ' Set the worksheet
    Set ws = ThisWorkbook.Sheets("Sheet1") ' Change "Sheet1" to your sheet name
    
    ' Define the ranges for the two columns you want to process
    Set emailRange1 = ws.Range("A1:A10") ' Adjust the range as needed
    Set emailRange2 = ws.Range("B1:B10") ' Adjust the range as needed
    
    ' Process each pair of cells in the specified ranges
    For i = 1 To emailRange1.Rows.Count
        ' Initialize a dictionary to store unique emails from the first cell
        Set emailDict = CreateObject("Scripting.Dictionary")
        
        ' Normalize delimiters and split emails in the first cell
        Dim normalizedContent1 As String
        normalizedContent1 = Replace(emailRange1.Cells(i, 1).Value, ";", ",")
        normalizedContent1 = Replace(normalizedContent1, " ", ",")
        emailArray = Split(normalizedContent1, ",")
        
        ' Add unique emails from the first cell to the dictionary
        For Each email In emailArray
            email = Trim(email)
            If email <> "" Then
                If Not emailDict.exists(email) Then
                    emailDict(email) = True
                End If
            End If
        Next email
        
        ' Normalize delimiters and split emails in the second cell
        Dim normalizedContent2 As String
        normalizedContent2 = Replace(emailRange2.Cells(i, 1).Value, ";", ",")
        normalizedContent2 = Replace(normalizedContent2, " ", ",")
        emailArray = Split(normalizedContent2, ",")
        
        ' Reassemble unique emails for the second cell, removing duplicates found in the first cell
        result2 = ""
        For Each email In emailArray
            email = Trim(email)
            If email <> "" Then
                If Not emailDict.exists(email) Then
                    result2 = result2 & email & "; "
                End If
            End If
        Next email
        
        ' Remove the trailing delimiter and update the second cell
        If Len(result2) > 0 Then
            result2 = Left(result2, Len(result2) - 2)
        End If
        emailRange2.Cells(i, 1).Value = result2
    Next i
    
    MsgBox "Duplicates from the second column have been removed for each row.", vbInformation
End Sub
-----------------------------------------------------------------------
three cols
------------------------------------------------------------------------
Sub RemoveDuplicatesAcrossThreeColumns()
    Dim ws As Worksheet
    Dim emailRange1 As Range
    Dim emailRange2 As Range
    Dim emailRange3 As Range
    Dim emailDict1 As Object
    Dim emailDict2 As Object
    Dim emailArray() As String
    Dim email As Variant ' Declare as Variant for dictionary keys
    Dim result2 As String
    Dim result3 As String
    Dim i As Integer
    
    ' Set the worksheet
    Set ws = ThisWorkbook.Sheets("Sheet1") ' Change "Sheet1" to your sheet name
    
    ' Define the ranges for the three columns you want to process
    Set emailRange1 = ws.Range("A1:A10") ' Adjust the range as needed
    Set emailRange2 = ws.Range("B1:B10") ' Adjust the range as needed
    Set emailRange3 = ws.Range("C1:C10") ' Adjust the range as needed
    
    ' Process each row in the specified ranges
    For i = 1 To emailRange1.Rows.Count
        ' Initialize dictionaries to store unique emails
        Set emailDict1 = CreateObject("Scripting.Dictionary")
        Set emailDict2 = CreateObject("Scripting.Dictionary")
        
        ' Normalize delimiters and split emails in the first cell
        Dim normalizedContent1 As String
        normalizedContent1 = Replace(emailRange1.Cells(i, 1).Value, ";", ",")
        normalizedContent1 = Replace(normalizedContent1, " ", ",")
        emailArray = Split(normalizedContent1, ",")
        
        ' Add unique emails from the first cell to the first dictionary
        For Each email In emailArray
            email = Trim(email)
            If email <> "" Then
                If Not emailDict1.exists(email) Then
                    emailDict1(email) = True
                End If
            End If
        Next email
        
        ' Normalize delimiters and split emails in the second cell
        Dim normalizedContent2 As String
        normalizedContent2 = Replace(emailRange2.Cells(i, 1).Value, ";", ",")
        normalizedContent2 = Replace(normalizedContent2, " ", ",")
        emailArray = Split(normalizedContent2, ",")
        
        ' Reassemble unique emails for the second cell, removing duplicates found in the first cell
        result2 = ""
        For Each email In emailArray
            email = Trim(email)
            If email <> "" Then
                If Not emailDict1.exists(email) Then
                    result2 = result2 & email & "; "
                    emailDict2(email) = True ' Add to second dictionary for third column check
                End If
            End If
        Next email
        
        ' Remove the trailing delimiter and update the second cell
        If Len(result2) > 0 Then
            result2 = Left(result2, Len(result2) - 2)
        End If
        emailRange2.Cells(i, 1).Value = result2
        
        ' Normalize delimiters and split emails in the third cell
        Dim normalizedContent3 As String
        normalizedContent3 = Replace(emailRange3.Cells(i, 1).Value, ";", ",")
        normalizedContent3 = Replace(normalizedContent3, " ", ",")
        emailArray = Split(normalizedContent3, ",")
        
        ' Reassemble unique emails for the third cell, removing duplicates found in the first and second cells
        result3 = ""
        For Each email In emailArray
            email = Trim(email)
            If email <> "" Then
                If Not emailDict1.exists(email) And Not emailDict2.exists(email) Then
                    result3 = result3 & email & "; "
                End If
            End If
        Next email
        
        ' Remove the trailing delimiter and update the third cell
        If Len(result3) > 0 Then
            result3 = Left(result3, Len(result3) - 2)
        End If
        emailRange3.Cells(i, 1).Value = result3
    Next i
    
    MsgBox "Duplicates have been removed across columns for each row.", vbInformation
End Sub
------------------------------------------------------------------------
combination
------------------------------------------------------------------------
Sub RemoveDuplicatesWithinAndAcrossColumns()
    Dim ws As Worksheet
    Dim emailRange1 As Range
    Dim emailRange2 As Range
    Dim emailRange3 As Range
    Dim emailDict1 As Object
    Dim emailDict2 As Object
    Dim emailArray() As String
    Dim email As Variant ' Declare as Variant for dictionary keys
    Dim result1 As String
    Dim result2 As String
    Dim result3 As String
    Dim i As Integer
    
    ' Set the worksheet
    Set ws = ThisWorkbook.Sheets("Sheet1") ' Change "Sheet1" to your sheet name
    
    ' Define the ranges for the three columns you want to process
    Set emailRange1 = ws.Range("A1:A10") ' Adjust the range as needed
    Set emailRange2 = ws.Range("B1:B10") ' Adjust the range as needed
    Set emailRange3 = ws.Range("C1:C10") ' Adjust the range as needed
    
    ' Process each row in the specified ranges
    For i = 1 To emailRange1.Rows.Count
        ' Initialize dictionaries to store unique emails
        Set emailDict1 = CreateObject("Scripting.Dictionary")
        Set emailDict2 = CreateObject("Scripting.Dictionary")
        
        ' Normalize delimiters and split emails in the first cell
        Dim normalizedContent1 As String
        normalizedContent1 = Replace(emailRange1.Cells(i, 1).Value, ";", ",")
        normalizedContent1 = Replace(normalizedContent1, " ", ",")
        emailArray = Split(normalizedContent1, ",")
        
        ' Add unique emails from the first cell to the first dictionary
        result1 = ""
        For Each email In emailArray
            email = Trim(email)
            If email <> "" Then
                If Not emailDict1.exists(email) Then
                    emailDict1(email) = True
                    result1 = result1 & email & "; "
                End If
            End If
        Next email
        
        ' Remove the trailing delimiter and update the first cell
        If Len(result1) > 0 Then
            result1 = Left(result1, Len(result1) - 2)
        End If
        emailRange1.Cells(i, 1).Value = result1
        
        ' Normalize delimiters and split emails in the second cell
        Dim normalizedContent2 As String
        normalizedContent2 = Replace(emailRange2.Cells(i, 1).Value, ";", ",")
        normalizedContent2 = Replace(normalizedContent2, " ", ",")
        emailArray = Split(normalizedContent2, ",")
        
        ' Reassemble unique emails for the second cell, removing duplicates found in the first cell
        result2 = ""
        For Each email In emailArray
            email = Trim(email)
            If email <> "" Then
                If Not emailDict1.exists(email) Then
                    result2 = result2 & email & "; "
                    emailDict2(email) = True ' Add to second dictionary for third column check
                End If
            End If
        Next email
        
        ' Remove the trailing delimiter and update the second cell
        If Len(result2) > 0 Then
            result2 = Left(result2, Len(result2) - 2)
        End If
        emailRange2.Cells(i, 1).Value = result2
        
        ' Normalize delimiters and split emails in the third cell
        Dim normalizedContent3 As String
        normalizedContent3 = Replace(emailRange3.Cells(i, 1).Value, ";", ",")
        normalizedContent3 = Replace(normalizedContent3, " ", ",")
        emailArray = Split(normalizedContent3, ",")
        
        ' Reassemble unique emails for the third cell, removing duplicates found in the first and second cells
        result3 = ""
        For Each email In emailArray
            email = Trim(email)
            If email <> "" Then
                If Not emailDict1.exists(email) And Not emailDict2.exists(email) Then
                    result3 = result3 & email & "; "
                End If
            End If
        Next email
        
        ' Remove the trailing delimiter and update the third cell
        If Len(result3) > 0 Then
            result3 = Left(result3, Len(result3) - 2)
        End If
        emailRange3.Cells(i, 1).Value = result3
    Next i
    
    MsgBox "Duplicates have been removed within each cell and across columns for each row.", vbInformation
End Sub
------------------------------------------------------------------------
minutes
-------------------------------------------------------------------------
import re
import pandas as pd

def extract_names_and_emails(text):
    # Regular expression to match the email patterns
    pattern = r'([a-z]+(?:-[a-z]+)*)\.([a-z]+)(?:-ext)?@domain\.com'
    
    # Find all matches in the text
    matches = re.findall(pattern, text, re.IGNORECASE)
    
    # Prepare the output list
    output = []
    
    for match in matches:
        lastnames = match[0].replace('-', ' ')
        firstname = match[1]
        email = f"{match[0]}.{match[1]}@domain.com"
        full_name = f"{firstname.capitalize()} {lastnames.capitalize()}"
        output.append(f"{full_name} {email}")
    
    return output

def process_excel(file_path):
    # Read the Excel file
    df = pd.read_excel(file_path)
    
    # Assuming the emails are in the first column
    emails = df.iloc[:, 0].tolist()
    
    # Process each email
    results = []
    for email in emails:
        results.extend(extract_names_and_emails(email))
    
    return results

# Example usage
file_path = 'emails.xlsx'  # Replace with your Excel file path
results = process_excel(file_path)

# Print the results
for result in results:
    print(result)



*#######@₹###@#_@-(-(+(-(+'+'-(-(-(-(-(-(1(1(-(
Email validation 
1)5%5%5%5+2)1(-₹)1₹-(-(+{_¥	¢	¥	¢	¢	{[©[©[}[©[©[
Sub RemoveDuplicatesWithinAndAcrossColumns()
    Dim ws As Worksheet
    Dim emailRange1 As Range
    Dim emailRange2 As Range
    Dim emailRange3 As Range
    Dim emailDict1 As Object
    Dim emailDict2 As Object
    Dim emailArray() As String
    Dim email As Variant ' Declare as Variant for dictionary keys
    Dim result1 As String
    Dim result2 As String
    Dim result3 As String
    Dim i As Integer

    ' Set the worksheet
    Set ws = ThisWorkbook.Sheets("Sheet1") ' Change "Sheet1" to your sheet name

    ' Define the ranges for the three columns you want to process
    Set emailRange1 = ws.Range("A1:A10") ' Adjust the range as needed
    Set emailRange2 = ws.Range("B1:B10") ' Adjust the range as needed
    Set emailRange3 = ws.Range("C1:C10") ' Adjust the range as needed

    ' Check if emailRange1 contains at least one email in each row
    For i = 1 To emailRange1.Rows.Count
        If Trim(emailRange1.Cells(i, 1).Value) = "" Then
            MsgBox "Cell " & emailRange1.Cells(i, 1).Address & " needs at least one email to continue the operation.", vbExclamation
            Exit Sub
        End If
    Next i

    ' Process each row in the specified ranges
    For i = 1 To emailRange1.Rows.Count
        ' Initialize dictionaries to store unique emails
        Set emailDict1 = CreateObject("Scripting.Dictionary")
        Set emailDict2 = CreateObject("Scripting.Dictionary")

        ' Normalize delimiters and split emails in the first cell
        Dim normalizedContent1 As String
        normalizedContent1 = Replace(emailRange1.Cells(i, 1).Value, ";", ",")
        normalizedContent1 = Replace(normalizedContent1, " ", ",")
        emailArray = Split(normalizedContent1, ",")

        ' Add unique emails from the first cell to the first dictionary
        result1 = ""
        For Each email In emailArray
            email = Trim(email)
            If email <> "" Then
                If Not emailDict1.exists(email) Then
                    emailDict1(email) = True
                    result1 = result1 & email & "; "
                End If
            End If
        Next email

        ' Remove the trailing delimiter and update the first cell
        If Len(result1) > 0 Then
            result1 = Left(result1, Len(result1) - 2)
        End If
        emailRange1.Cells(i, 1).Value = result1

        ' Normalize delimiters and split emails in the second cell
        Dim normalizedContent2 As String
        normalizedContent2 = Replace(emailRange2.Cells(i, 1).Value, ";", ",")
        normalizedContent2 = Replace(normalizedContent2, " ", ",")
        emailArray = Split(normalizedContent2, ",")

        ' Reassemble unique emails for the second cell, removing duplicates found in the first cell
        result2 = ""
        For Each email In emailArray
            email = Trim(email)
            If email <> "" Then
                If Not emailDict1.exists(email) Then
                    result2 = result2 & email & "; "
                    emailDict2(email) = True ' Add to second dictionary for third column check
                End If
            End If
        Next email

        ' Remove the trailing delimiter and update the second cell
        If Len(result2) > 0 Then
            result2 = Left(result2, Len(result2) - 2)
        End If
        emailRange2.Cells(i, 1).Value = result2

        ' Normalize delimiters and split emails in the third cell
        Dim normalizedContent3 As String
        normalizedContent3 = Replace(emailRange3.Cells(i, 1).Value, ";", ",")
        normalizedContent3 = Replace(normalizedContent3, " ", ",")
        emailArray = Split(normalizedContent3, ",")

        ' Reassemble unique emails for the third cell, removing duplicates found in the first and second cells
        result3 = ""
        For Each email In emailArray
            email = Trim(email)
            If email <> "" Then
                If Not emailDict1.exists(email) And Not emailDict2.exists(email) Then
                    result3 = result3 & email & "; "
                End If
            End If
        Next email

        ' Remove the trailing delimiter and update the third cell
        If Len(result3) > 0 Then
            result3 = Left(result3, Len(result3) - 2)
        End If
        emailRange3.Cells(i, 1).Value = result3
    Next i

    MsgBox "Duplicates have been removed within each cell and across columns for each row.", vbInformation
End Sub
-------------------------------------------------------------------------
combo 2
--------------------------------------------------------------------------
Sub RemoveDuplicatesWithinAndAcrossColumnsSameRow()
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim i As Long, j As Long
    Dim emailArray() As String
    Dim email As Variant
    Dim emailDict As Object

    Set ws = ThisWorkbook.Sheets("Sheet1") ' Change "Sheet1" to your sheet name

    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row ' Dynamically find last row

    For i = 1 To lastRow
        Set emailDict = CreateObject("Scripting.Dictionary") ' Re-initialize for each row

        ' Remove duplicates within each cell first
        For j = 1 To 3 ' Loop through columns A, B, and C
            emailArray = Split(Replace(Replace(ws.Cells(i, j).Value, ";", ","), " ", ","), ",")
            ws.Cells(i, j).ClearContents
            For Each email In emailArray
                email = Trim(email)
                If email <> "" And Not emailDict.exists(email) Then
                    ws.Cells(i, j).Value = ws.Cells(i, j).Value & email & "; "
                    emailDict(email) = True ' Add to dictionary for cross-column check
                End If
            Next email
            If ws.Cells(i, j).Value <> "" Then
                ws.Cells(i, j).Value = Left(ws.Cells(i, j).Value, Len(ws.Cells(i, j).Value) - 2)
            End If
        Next j


        'Now remove duplicates across columns within the same row, prioritizing leftmost columns
        Set emailDict = CreateObject("Scripting.Dictionary") ' Reset dictionary for cross-column check
        For j = 1 To 3
            emailArray = Split(Replace(Replace(ws.Cells(i, j).Value, ";", ","), " ", ","), ",")
            ws.Cells(i, j).ClearContents
            For Each email In emailArray
                email = Trim(email)
                If email <> "" And Not emailDict.exists(email) Then
                    ws.Cells(i, j).Value = ws.Cells(i, j).Value & email & "; "
                    emailDict(email) = True
                End If
            Next email
            If ws.Cells(i, j).Value <> "" Then
                ws.Cells(i, j).Value = Left(ws.Cells(i, j).Value, Len(ws.Cells(i, j).Value) - 2)
            End If
        Next j

    Next i

    MsgBox "Duplicates have been removed within and across columns for each row.", vbInformation
End Sub



#####_#_#-=#=#=#==#=#
' First, add this Function to handle RegEx matching
Function ExtractEmails(ByVal text As String) As Collection
    Dim regex As Object
    Dim matches As Object
    Dim match As Object
    Dim emailCollection As New Collection
    
    Set regex = CreateObject("VBScript.RegExp")
    
    With regex
        .Global = True
        .IgnoreCase = True
        ' Pattern for matching emails like firstname.lastname@domain.com or firstname-lastname.lastname-ext@domain.com
        .Pattern = "([a-z]+(?:-[a-z]+)*)\.([a-z]+)(?:-ext)?@domain\.com"
    End With
    
    Set matches = regex.Execute(text)
    
    For Each match In matches
        emailCollection.Add match.Value
    Next match
    
    Set ExtractEmails = emailCollection
End Function

Sub RemoveDuplicatesWithinAndAcrossColumnsSameRow()
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim i As Long, j As Long
    Dim emailDict As Object
    Dim email As Variant
    Dim cellContent As String
    Dim emailCollection As Collection
    
    Set ws = ThisWorkbook.Sheets("Sheet1") ' Change "Sheet1" to your sheet name
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    
    For i = 1 To lastRow
        Set emailDict = CreateObject("Scripting.Dictionary")
        
        ' First pass: Remove duplicates within each cell
        For j = 1 To 3 ' Columns A, B, and C
            cellContent = ws.Cells(i, j).Value
            If Len(Trim(cellContent)) > 0 Then
                Set emailCollection = ExtractEmails(cellContent)
                
                ws.Cells(i, j).ClearContents
                For Each email In emailCollection
                    If Not emailDict.exists(email) Then
                        If ws.Cells(i, j).Value = "" Then
                            ws.Cells(i, j).Value = email
                        Else
                            ws.Cells(i, j).Value = ws.Cells(i, j).Value & "; " & email
                        End If
                        emailDict(email) = True
                    End If
                Next email
            End If
        Next j
        
        ' Second pass: Remove duplicates across columns
        Set emailDict = CreateObject("Scripting.Dictionary")
        For j = 1 To 3
            cellContent = ws.Cells(i, j).Value
            If Len(Trim(cellContent)) > 0 Then
                Set emailCollection = ExtractEmails(cellContent)
                
                ws.Cells(i, j).ClearContents
                For Each email In emailCollection
                    If Not emailDict.exists(email) Then
                        If ws.Cells(i, j).Value = "" Then
                            ws.Cells(i, j).Value = email
                        Else
                            ws.Cells(i, j).Value = ws.Cells(i, j).Value & "; " & email
                        End If
                        emailDict(email) = True
                    End If
                Next email
            End If
        Next j
    Next i
    
    MsgBox "Duplicates have been removed within and across columns for each row.", vbInformation
End Sub