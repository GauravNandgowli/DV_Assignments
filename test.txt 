Sub ScheduleMeetingsInOutlook()
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim i As Long
    Dim olApp As Object
    Dim olAppt As Object
    Dim userResponse As VbMsgBoxResult
    Dim processedMeetings As Long
    
    ' Disable screen updating and alerts
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    ' Set the worksheet
    On Error Resume Next
    Set ws = ThisWorkbook.Sheets("Sheet1") ' Change "Sheet1" to your sheet name
    On Error GoTo 0
    
    ' Check if the worksheet is set
    If ws Is Nothing Then
        MsgBox "Worksheet not found. Please check the sheet name.", vbCritical
        Exit Sub
    End If
    
    ' Determine the last row with data
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    
    ' Initialize Outlook application
    On Error Resume Next
    Set olApp = GetObject(Class:="Outlook.Application")
    If olApp Is Nothing Then
        Set olApp = CreateObject("Outlook.Application")
    End If
    If olApp Is Nothing Then
        MsgBox "Unable to start Outlook. Please ensure Outlook is installed.", vbCritical
        Exit Sub
    End If
    On Error GoTo 0
    
    ' Initialize meeting counter
    processedMeetings = 0
    
    ' Loop through each row and create meetings
    For i = 2 To lastRow ' Assuming the first row contains headers
        ' Reset error handling for each iteration
        On Error Resume Next
        
        ' Skip empty rows
        If WorksheetFunction.CountA(ws.Rows(i)) = 0 Then
            GoTo NextRow
        End If
        
        ' Validate and convert essential columns
        Dim meetingDate As Date
        Dim startTime As Date
        Dim endTime As Date
        Dim subject As String
        Dim requiredAttendees As String
        Dim optionalAttendees As String
        
        ' Safely convert date
        If IsDate(ws.Cells(i, 1).Value) Then
            meetingDate = CDate(ws.Cells(i, 1).Value)
        Else
            meetingDate = Date ' Default to current date
        End If
        
        ' Safely convert start time
        If IsDate(ws.Cells(i, 2).Value) Then
            startTime = TimeValue(ws.Cells(i, 2).Value)
        Else
            startTime = TimeValue("09:00") ' Default start time
        End If
        
        ' Safely convert end time
        If IsDate(ws.Cells(i, 3).Value) Then
            endTime = TimeValue(ws.Cells(i, 3).Value)
        Else
            endTime = TimeValue("10:00") ' Default end time
        End If
        
        ' Prepare other meeting details
        subject = CStr(IIf(IsEmpty(ws.Cells(i, 4).Value), "Meeting", ws.Cells(i, 4).Value))
        requiredAttendees = CStr(IIf(IsEmpty(ws.Cells(i, 5).Value), "", ws.Cells(i, 5).Value))
        optionalAttendees = CStr(IIf(IsEmpty(ws.Cells(i, 6).Value), "", ws.Cells(i, 6).Value))
        
        ' Combine date and time
        Dim fullStartTime As Date
        Dim fullEndTime As Date
        fullStartTime = meetingDate + startTime
        fullEndTime = meetingDate + endTime
        
        ' Create a new appointment item
        Set olAppt = olApp.CreateItem(1) ' 1 = olAppointmentItem
        
        ' Set meeting details
        With olAppt
            .Start = fullStartTime
            .End = fullEndTime
            .Subject = subject
            .RequiredAttendees = requiredAttendees
            .OptionalAttendees = optionalAttendees
            .Body = "Meeting details for: " & subject
            .ReminderMinutesBeforeStart = 15
            .ReminderSet = True
        End With
        
        ' Display the appointment
        olAppt.Display
        
        ' Bring the Outlook window to the foreground
        AppActivate "Microsoft Outlook"
        
        ' Wait for user to process the meeting
        userResponse = MsgBox("Process meeting: " & subject & vbNewLine & _
                               "Click YES to proceed to next meeting," & vbNewLine & _
                               "Click NO to keep this window open.", _
                               vbYesNo + vbQuestion, "Meeting Processing")
        
        ' Close the appointment if user chooses to proceed
        If userResponse = vbYes Then
            ' Attempt to close the appointment
            On Error Resume Next
            olAppt.Close(0) ' 0 = olDiscard
            On Error GoTo 0
        End If
        
        ' Increment processed meetings counter
        processedMeetings = processedMeetings + 1
        
        ' Clean up this iteration's objects
        Set olAppt = Nothing
        
        ' Ensure Outlook remains active
        AppActivate "Microsoft Outlook"
        
        ' Add a small delay to ensure Outlook can process
        DoEvents
        
NextRow:
        ' Clear any lingering errors
        Err.Clear
    Next i
    
    ' Clean up Outlook application
    Set olApp = Nothing
    
    ' Restore screen updating and alerts
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    
    ' Show completion message
    MsgBox "Processed " & processedMeetings & " meetings successfully.", vbInformation
End Sub